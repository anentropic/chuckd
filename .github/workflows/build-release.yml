name: Release builder

# when a new version tag is pushed by `detect-release` workflow
# or when manually triggered
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: Git tag we're manually triggering for
        required: true

jobs:
  draft-github-release:
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      version: ${{ steps.tag-name.outputs.version }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: little-core-labs/get-git-tag@v3.0.2
        id: get-tag
      - run: 'echo "tag: ${{ steps.get-tag.outputs.tag }}"'
        if: 'steps.get-tag.outputs.tag'
      - run: 'echo "manual version: ${{ github.event.inputs.version }}"'
        if: '!steps.tag-name.outputs.tag'

      - id: tag-name
        run: echo "::set-output name=version::${{ steps.get-tag.outputs.tag || github.event.inputs.version }}"

      # we'll upload files to it from each of the `build-native-image` matrix jobs
      # then publish ("un-draft") it at the end
      - name: Create draft GitHub release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag-name.outputs.version }}
          release_name: ${{ steps.tag-name.outputs.version }}
          draft: true
          prerelease: false

  build-native-image:
    needs: draft-github-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        include:
          - os: macos-latest
            platform-name: macOS-x86_64
          - os: ubuntu-latest
            platform-name: Linux-x86_64
    steps:
      - uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: '21.1.0'
          native-image: true

      - uses: actions/checkout@v2
      - name: Build GraalVM native-image
        run: ./gradlew nativeImage

      - name: Set artifact name
        id: name-artifact
        run: echo "::set-output name=name::chuckd-${{ matrix.platform-name }}-${{ needs.draft-github-release.outputs.version }}.tar.gz"

      # https://github.com/actions/virtual-environments/issues/2619
      # without this the file is corrupted and gives "exec format error" after extracting
      - name: work-around for macOS tar.gz issue
        if: ${{ matrix.os == 'macos-latest' }}
        run: sudo /usr/sbin/purge

      - name: .tar.gz artifact
        run: (cd ./app/build/bin/ && tar -czvf ${{ steps.name-artifact.outputs.name }} chuckd)

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.draft-github-release.outputs.upload-url }}
          asset_path: ./app/build/bin/${{ steps.name-artifact.outputs.name }}
          asset_name: ${{ steps.name-artifact.outputs.name }}
          asset_content_type: application/gzip

  publish-github-release:
    needs: [draft-github-release, build-native-image]
    runs-on: ubuntu-latest
    steps:
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.draft-github-release.outputs.release-id }}

  build-docker-image:
    needs: draft-github-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Prepare image metadata
        id: metadata
        run: |
          echo ::set-output name=timestamp::$(date -u +%Y-%m-%dT%H:%M:%S%z) \
          && echo ::set-output name=git-commit::$(/usr/bin/git log -1 --format='%H') \
          && echo ::set-output name=short-description::'Schema evolution validation tool. Check backward compatibility of your JSON Schema changes.'

      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1

      - uses: docker/login-action@v1
        with:
          username: anentropic
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: |
            linux/amd64
            linux/arm64
          push: true
          tags: |
            anentropic/chuckd:${{ needs.draft-github-release.outputs.version }}
            anentropic/chuckd:latest
          # https://github.com/crazy-max/ghaction-docker-meta/blob/1a678de43d82fbc865fe8fe6b8586fa82d9596aa/src/meta.ts#L350
          # https://github.com/opencontainers/image-spec/blob/master/annotations.md#pre-defined-annotation-keys
          labels: |
            org.opencontainers.image.title=chuckd
            org.opencontainers.image.description=${{ steps.metadata.outputs.short-description }}
            org.opencontainers.image.url=https://hub.docker.com/r/anentropic/chuckd
            org.opencontainers.image.source=https://github.com/anentropic/chuckd
            org.opencontainers.image.version=${{ needs.draft-github-release.outputs.version }}
            org.opencontainers.image.created=${{ steps.metadata.outputs.timestamp }}
            org.opencontainers.image.revision=${{ steps.metadata.outputs.git-commit }}
            org.opencontainers.image.licenses=Apache-2.0

      - name: Push README to Dockerhub
        uses: christian-korneck/update-container-description-action@v1
        env:
          DOCKER_USER: anentropic
          DOCKER_PASS: ${{ secrets.DOCKERHUB_PASSWORD }}
        with:
          destination_container_repo: anentropic/chuckd
          provider: dockerhub
          short_description: ${{ steps.metadata.outputs.short-description }}
          readme_file: 'dockerhub.md'
